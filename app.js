(function () {

  var DEFAULT_DELAY = 10,
      cancelMessage,
      cancelledMessage,
      tickTimer,
      stopped,
      delay;

  return {
    events: {
      'app.activated': 'init',
      'ticket.save': 'save',
      'ticket.submit.always': 'cleanTimer',
      'click .cancel-ticket-submit': 'cancel',
      'zd_ui_change .delay-settings-dropdown': 'updateSettings'
    },

    init: function () {
      cancelMessage = helpers.fmt("<a tabindex='-1' onclick='$(\"#cancel-ticket-submit\").trigger(\"click\");'><strong>%@</strong></a>", this.I18n.t('cancelMessage'));
      cancelledMessage = this.I18n.t('cancelledMessage');
      delay = this.getDelay();
      this.store({'ticketSubmissionUserDelay': delay});

      this.switchTo('settings');
      this.$('.delay-settings-dropdown').zdSelectMenu('setValue', delay);
      if (!this.setting('allow_agents_choose_timeout')) {
        this.hide();
      }
    },

    updateSettings: function () {
      var userDelay = parseInt(this.$('.delay-settings-dropdown').zdSelectMenu('value'), 10);
      this.store({'ticketSubmissionUserDelay': userDelay});
    },

    cancel: function() {
      stopped = true;
    },

    cleanTimer: function () {
      clearInterval(tickTimer);
    },

    save: function () {
      var uses_rich_text = this.comment().useRichText();
      var comment_text;

      if (uses_rich_text) {
        /* When the rich text editor is enabled, Zendesk comment api auto escapes html manually entered by agent (prevents xss),
           but it leaves html generated by rich text toolbar editing options (bold, italic, etc) */
        comment_text = this.comment().text();
      }
      else {
        // When the rich text editor is disabled, and markdown or plain text is used, agent entered html is not escaped properly.
        // Escape html (prevents xss via agent entered html)
        comment_text = this.$('<div/>').text(this.comment().text()).html();

        // Turn '\n' into <br/> so comment line breaks are rendered on the modal.
        comment_text = comment_text.replace(/\n/g, '<br/>');
      }

      if (comment_text.length < 1) {
        return true;
      }

      var tick = this.getDelay();
      // bail out if delay set to off
      if (tick <= 0) { return true; }

      var self = this;
      this.switchTo('modal');
      this.show();
      this.$('.my_modal').modal({
        backdrop: false,
        keyboard: false
      });
      this.$("p#message_to_save").append(comment_text);
      this.$('.cancel-ticket-submit').click(function(){
        self.cancel();
        self.init();
      });
      this.$("#tick_timer").text(tick);

      stopped = false;

      return this.promise(function (done, fail) {
        this.$('.save-ticket-submit').click(function(){
          console.log('clicked save');
          done();
        });
        var delay = self.getDelay();
        tickTimer = setInterval(function () {
          if (stopped) {
            clearInterval(tickTimer);
            self.$(".my_modal").hide();
            if (self.setting('allow_agents_choose_timeout')) {
              self.switchTo('settings');
              self.$('.delay-settings-dropdown').zdSelectMenu('setValue', delay);
            }
            fail(cancelledMessage);
          } else {
            tick--;
            self.$("#tick_timer").text(tick);
            if (tick === 0) {
              clearInterval(tickTimer);
              self.$(".my_modal").hide();
              if (self.setting('allow_agents_choose_timeout')) {
                self.switchTo('settings');
                self.$('.delay-settings-dropdown').zdSelectMenu('setValue', delay);
              }
              done();
            }
          }
        }, 1000);
      });
    },

    getDelay: function () {
      var myDelay = this.store('ticketSubmissionUserDelay');
      if (myDelay !== 0 && !myDelay) {
        myDelay = DEFAULT_DELAY;
      }

      return myDelay;
    }
  };
}());
